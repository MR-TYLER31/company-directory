{"version":3,"sources":["components/Header.js","utils/API.js","components/DisplayEmployees.js","components/SearchFilter.js","components/ContentWrapper.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","style","fontSize","axios","get","DisplayEmployees","props","results","filteredContacts","filter","contact","name","first","last","toLowerCase","indexOf","search","id","width","onClick","sortByNameAsc","sortByNameDesc","sortByDateAsc","sortByDateDesc","map","result","key","email","src","picture","medium","alt","phone","date","dateArray","split","year","join","formatDate","registered","SearchFilter","value","onChange","updateSearch","list","type","placeholder","ContentWrapper","state","employee","isLoading","bind","this","setState","API","then","data","event","target","sort","a","b","toUpperCase","console","log","role","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4a7bf207.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <div className=\"header text-center text-white mt-5\">\n      <h1>Employee Directory</h1>\n      <p style={{ fontSize: \"20px\" }}>Search by name or sort by fields</p>\n    </div>\n  );\n}\n\nexport default Header;\n","import axios from \"axios\";\n\nconst BASEURL = \"https://randomuser.me/api/?results=100&nat=us\";\n\nexport default {\n  search: function() {\n    return axios.get(BASEURL);\n  }\n};\n","import React from \"react\";\n\nfunction formatDate(date) {\n  const dateArray = date.split(\"-\");\n  const year = dateArray[0];\n  const month = dateArray[1];\n  const dayArray = dateArray[2].split(\"T\");\n  const day = dayArray[0];\n  const formattedDate = [month, day, year].join(\"-\");\n  return formattedDate;\n}\n\nfunction DisplayEmployees(props) {\n  if (!props || !props.results) {\n    return null;\n  }\n\n  let filteredContacts = props.results.filter(contact => {\n    let firstName = contact.name.first;\n    let lastName = contact.name.last;\n    let fullName = firstName + \" \" + lastName;\n\n    return fullName.toLowerCase().indexOf(props.search.toLowerCase()) !== -1;\n  });\n\n  return (\n    <div id=\"table-div\">\n      <table style={{ width: \"90%\" }}>\n        <thead>\n          <tr>\n            <th>Image</th>\n            <th className=\"text-center\">\n              <i\n                onClick={() => props.sortByNameAsc(\"name\")}\n                className=\"fas fa-arrow-circle-down mr-3 hide\"\n              ></i>\n              Name\n              <i\n                onClick={() => props.sortByNameDesc(\"name\")}\n                className=\"fas fa-arrow-circle-up ml-3 hide\"\n              ></i>\n            </th>\n            <th className=\"text-center\">Phone</th>\n            <th className=\"text-center\">Email</th>\n            <th className=\"text-center\">\n              <i\n                onClick={() => props.sortByDateAsc(\"date\")}\n                className=\"fas fa-arrow-circle-down mr-3 hide\"\n              ></i>\n              Date Hired\n              <i\n                onClick={() => props.sortByDateDesc(\"date\")}\n                className=\"fas fa-arrow-circle-up ml-3 hide\"\n              ></i>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredContacts.map(result => (\n            <tr key={result.email}>\n              <td>\n                <img src={result.picture.medium} alt=\"Employee Pic\" />\n              </td>\n              <td>{`${result.name.first}  ${result.name.last}`}</td>\n              <td>{result.phone}</td>\n              <td>{result.email}</td>\n              <td>{formatDate(result.registered.date)}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default DisplayEmployees;\n","import React from \"react\";\n\nfunction SearchFilter(props) {\n  return (\n    <form className=\"search mb-5\">\n      <div className=\"form-group text-white\">\n        {/* <label htmlFor=\"language\">Search by name:</label> */}\n        <input\n          value={props.search}\n          onChange={props.updateSearch}\n          name=\"term\"\n          list=\"term\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Enter name to filter\"\n          id=\"term\"\n        />\n      </div>\n    </form>\n  );\n}\n\nexport default SearchFilter;\n","import React from \"react\";\nimport API from \"../utils/API\";\nimport DisplayEmployees from \"./DisplayEmployees\";\nimport SearchFilter from \"./SearchFilter\";\n\nclass ContentWrapper extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      employee: [],\n      search: \"\",\n      isLoading: true\n    };\n\n    this.updateSearch = this.updateSearch.bind(this);\n    this.sortByNameAsc = this.sortByNameAsc.bind(this);\n    this.sortByNameDesc = this.sortByNameDesc.bind(this);\n    this.sortByDateAsc = this.sortByDateAsc.bind(this);\n    this.sortByDateDesc = this.sortByDateDesc.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({ isLoading: true });\n    API.search().then(results => {\n      // console.log(results.data.results);\n      return this.setState({\n        employee: results.data.results,\n        isLoading: false\n      });\n    });\n  }\n\n  updateSearch(event) {\n    // console.log(event.target.value);\n    this.setState({ search: event.target.value });\n  }\n\n  sortByNameAsc(key) {\n    this.setState({\n      employee: this.state.employee.sort(function(a, b) {\n        var nameA = a.name.first.toUpperCase(); // ignore upper and lowercase\n        var nameB = b.name.first.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n          return -1;\n        }\n\n        // names must be equal\n        return 0;\n      })\n    });\n  }\n\n  sortByNameDesc(key) {\n    this.setState({\n      employee: this.state.employee.sort(function(a, b) {\n        var nameA = a.name.first.toUpperCase(); // ignore upper and lowercase\n        var nameB = b.name.first.toUpperCase(); // ignore upper and lowercase\n        if (nameA > nameB) {\n          return -1;\n        }\n\n        // names must be equal\n        return 0;\n      })\n    });\n  }\n\n  sortByDateAsc(key) {\n    this.setState({\n      employee: this.state.employee.sort(function(a, b) {\n        var nameA = a.registered.date; // ignore upper and lowercase\n        var nameB = b.registered.date; // ignore upper and lowercase\n        if (nameA < nameB) {\n          return -1;\n        }\n        // names must be equal\n        return 0;\n      })\n    });\n  }\n\n  sortByDateDesc(key) {\n    console.log(\"click\");\n    this.setState({\n      employee: this.state.employee.sort(function(a, b) {\n        var nameA = a.registered.date; // ignore upper and lowercase\n        var nameB = b.registered.date; // ignore upper and lowercase\n        if (nameA > nameB) {\n          return -1;\n        }\n\n        // names must be equal\n        return 0;\n      })\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <SearchFilter\n          search={this.state.search}\n          updateSearch={this.updateSearch}\n        />\n        {this.state.isLoading ? (\n          <div className=\"d-flex justify-content-center align-items-center\">\n            <div className=\"spinner-grow\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </div>\n          </div>\n        ) : (\n          <DisplayEmployees\n            results={this.state.employee}\n            search={this.state.search}\n            sortByNameAsc={this.sortByNameAsc}\n            sortByNameDesc={this.sortByNameDesc}\n            sortByDateAsc={this.sortByDateAsc}\n            sortByDateDesc={this.sortByDateDesc}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default ContentWrapper;\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport \"./App.css\";\nimport ContentWrapper from \"./components/ContentWrapper\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <ContentWrapper />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}